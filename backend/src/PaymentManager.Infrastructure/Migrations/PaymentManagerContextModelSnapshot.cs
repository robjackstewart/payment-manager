// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PaymentManager.Infrastructure;

#nullable disable

namespace PaymentManager.Infrastructure.Migrations
{
    [DbContext(typeof(PaymentManagerContext))]
    partial class PaymentManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("PaymentManager.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("PaymentManager.Domain.Entities.PaymentPercentageSplit", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PaymentSourceId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Percentage")
                        .HasColumnType("REAL");

                    b.HasKey("PaymentId", "PaymentSourceId");

                    b.HasIndex("PaymentSourceId");

                    b.ToTable("PaymentPercentageSplits");
                });

            modelBuilder.Entity("PaymentManager.Domain.Entities.PaymentSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentSources");
                });

            modelBuilder.Entity("PaymentManager.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae25b45e-63af-4b89-a8e8-2bb3e142f06d"),
                            Name = "Default User"
                        });
                });

            modelBuilder.Entity("PaymentManager.Domain.Entities.Payment", b =>
                {
                    b.HasOne("PaymentManager.Domain.Entities.PaymentSource", "Source")
                        .WithMany("Payments")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PaymentManager.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("PaymentManager.Domain.Entities.PaymentSchedule", "Schedule", b1 =>
                        {
                            b1.Property<Guid>("PaymentId")
                                .HasColumnType("TEXT");

                            b1.Property<DateOnly?>("EndDate")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Every")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Occurs")
                                .HasColumnType("INTEGER");

                            b1.Property<DateOnly>("StartDate")
                                .HasColumnType("TEXT");

                            b1.HasKey("PaymentId");

                            b1.ToTable("Payments");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.Navigation("Schedule")
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PaymentManager.Domain.Entities.PaymentPercentageSplit", b =>
                {
                    b.HasOne("PaymentManager.Domain.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PaymentManager.Domain.Entities.PaymentSource", "PaymentSource")
                        .WithMany()
                        .HasForeignKey("PaymentSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("PaymentSource");
                });

            modelBuilder.Entity("PaymentManager.Domain.Entities.PaymentSource", b =>
                {
                    b.HasOne("PaymentManager.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PaymentManager.Domain.Entities.PaymentSource", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
