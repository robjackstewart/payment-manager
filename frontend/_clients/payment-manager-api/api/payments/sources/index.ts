/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createGetAllPaymentSourcesResponseFromDiscriminatorValue, createProblemDetailsFromDiscriminatorValue, type GetAllPaymentSourcesResponse, type ProblemDetails } from '../../../models/index.js';
// @ts-ignore
import { SourcesItemRequestBuilderRequestsMetadata, type SourcesItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/payments/sources
 */
export interface SourcesRequestBuilder extends BaseRequestBuilder<SourcesRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.api.payments.sources.item collection
     * @param id Unique identifier of the item
     * @returns {SourcesItemRequestBuilder}
     */
     byId(id: Guid) : SourcesItemRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<GetAllPaymentSourcesResponse>}
     * @throws {ProblemDetails} error when the service returns a 400 status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<GetAllPaymentSourcesResponse | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const SourcesRequestBuilderUriTemplate = "{+baseurl}/api/payments/sources";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SourcesRequestBuilderNavigationMetadata: Record<Exclude<keyof SourcesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: SourcesItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SourcesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SourcesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createGetAllPaymentSourcesResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
