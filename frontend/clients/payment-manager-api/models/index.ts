/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type Guid, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateUser}
 */
// @ts-ignore
export function createCreateUserFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateUser;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateUserResponse}
 */
// @ts-ignore
export function createCreateUserResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateUserResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetUserResponse}
 */
// @ts-ignore
export function createGetUserResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetUserResponse;
}
export interface CreateUser extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The name property
     */
    name?: string | null;
}
export interface CreateUserResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The name property
     */
    name?: string | null;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateUser(createUser: Partial<CreateUser> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { createUser.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateUserResponse(createUserResponse: Partial<CreateUserResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { createUserResponse.id = n.getGuidValue(); },
        "name": n => { createUserResponse.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGetUserResponse(getUserResponse: Partial<GetUserResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { getUserResponse.id = n.getGuidValue(); },
        "name": n => { getUserResponse.name = n.getStringValue(); },
    }
}
export interface GetUserResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The name property
     */
    name?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateUser(writer: SerializationWriter, createUser: Partial<CreateUser> | undefined | null = {}) : void {
    if (createUser) {
        writer.writeStringValue("name", createUser.name);
        writer.writeAdditionalData(createUser.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateUserResponse(writer: SerializationWriter, createUserResponse: Partial<CreateUserResponse> | undefined | null = {}) : void {
    if (createUserResponse) {
        writer.writeGuidValue("id", createUserResponse.id);
        writer.writeStringValue("name", createUserResponse.name);
        writer.writeAdditionalData(createUserResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGetUserResponse(writer: SerializationWriter, getUserResponse: Partial<GetUserResponse> | undefined | null = {}) : void {
    if (getUserResponse) {
        writer.writeGuidValue("id", getUserResponse.id);
        writer.writeStringValue("name", getUserResponse.name);
        writer.writeAdditionalData(getUserResponse.additionalData);
    }
}
/* tslint:enable */
/* eslint-enable */
