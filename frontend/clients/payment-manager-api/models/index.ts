/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type DateOnly, type Guid, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreatePaymentSourceEndpointRequest}
 */
// @ts-ignore
export function createCreatePaymentSourceEndpointRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreatePaymentSourceEndpointRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreatePaymentSourceResponse}
 */
// @ts-ignore
export function createCreatePaymentSourceResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreatePaymentSourceResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateUserEndpointRequest}
 */
// @ts-ignore
export function createCreateUserEndpointRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateUserEndpointRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateUserResponse}
 */
// @ts-ignore
export function createCreateUserResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateUserResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetAllPaymentSourcesResponse}
 */
// @ts-ignore
export function createGetAllPaymentSourcesResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetAllPaymentSourcesResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetAllPaymentSourcesResponsePaymentSourceDto}
 */
// @ts-ignore
export function createGetAllPaymentSourcesResponsePaymentSourceDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetAllPaymentSourcesResponsePaymentSourceDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetAllUsersResponse}
 */
// @ts-ignore
export function createGetAllUsersResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetAllUsersResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetAllUsersResponseUserDto}
 */
// @ts-ignore
export function createGetAllUsersResponseUserDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetAllUsersResponseUserDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetPaymentOccurencesResponse}
 */
// @ts-ignore
export function createGetPaymentOccurencesResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetPaymentOccurencesResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetPaymentOccurencesResponsePaymentOccurrenceDto}
 */
// @ts-ignore
export function createGetPaymentOccurencesResponsePaymentOccurrenceDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetPaymentOccurencesResponsePaymentOccurrenceDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetPaymentSourceResponse}
 */
// @ts-ignore
export function createGetPaymentSourceResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetPaymentSourceResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetUserResponse}
 */
// @ts-ignore
export function createGetUserResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetUserResponse;
}
export interface CreatePaymentSourceEndpointRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The name property
     */
    name?: string | null;
}
export interface CreatePaymentSourceResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The name property
     */
    name?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProblemDetails}
 */
// @ts-ignore
export function createProblemDetailsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProblemDetails;
}
export interface CreateUserEndpointRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The name property
     */
    name?: string | null;
}
export interface CreateUserResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The name property
     */
    name?: string | null;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreatePaymentSourceEndpointRequest(createPaymentSourceEndpointRequest: Partial<CreatePaymentSourceEndpointRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { createPaymentSourceEndpointRequest.description = n.getStringValue(); },
        "name": n => { createPaymentSourceEndpointRequest.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreatePaymentSourceResponse(createPaymentSourceResponse: Partial<CreatePaymentSourceResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { createPaymentSourceResponse.description = n.getStringValue(); },
        "id": n => { createPaymentSourceResponse.id = n.getGuidValue(); },
        "name": n => { createPaymentSourceResponse.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateUserEndpointRequest(createUserEndpointRequest: Partial<CreateUserEndpointRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { createUserEndpointRequest.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateUserResponse(createUserResponse: Partial<CreateUserResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { createUserResponse.id = n.getGuidValue(); },
        "name": n => { createUserResponse.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGetAllPaymentSourcesResponse(getAllPaymentSourcesResponse: Partial<GetAllPaymentSourcesResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "paymentSources": n => { getAllPaymentSourcesResponse.paymentSources = n.getCollectionOfObjectValues<GetAllPaymentSourcesResponsePaymentSourceDto>(createGetAllPaymentSourcesResponsePaymentSourceDtoFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGetAllPaymentSourcesResponsePaymentSourceDto(getAllPaymentSourcesResponsePaymentSourceDto: Partial<GetAllPaymentSourcesResponsePaymentSourceDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { getAllPaymentSourcesResponsePaymentSourceDto.description = n.getStringValue(); },
        "id": n => { getAllPaymentSourcesResponsePaymentSourceDto.id = n.getGuidValue(); },
        "name": n => { getAllPaymentSourcesResponsePaymentSourceDto.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGetAllUsersResponse(getAllUsersResponse: Partial<GetAllUsersResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "users": n => { getAllUsersResponse.users = n.getCollectionOfObjectValues<GetAllUsersResponseUserDto>(createGetAllUsersResponseUserDtoFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGetAllUsersResponseUserDto(getAllUsersResponseUserDto: Partial<GetAllUsersResponseUserDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { getAllUsersResponseUserDto.id = n.getGuidValue(); },
        "name": n => { getAllUsersResponseUserDto.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGetPaymentOccurencesResponse(getPaymentOccurencesResponse: Partial<GetPaymentOccurencesResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "occurrences": n => { getPaymentOccurencesResponse.occurrences = n.getCollectionOfObjectValues<GetPaymentOccurencesResponsePaymentOccurrenceDto>(createGetPaymentOccurencesResponsePaymentOccurrenceDtoFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGetPaymentOccurencesResponsePaymentOccurrenceDto(getPaymentOccurencesResponsePaymentOccurrenceDto: Partial<GetPaymentOccurencesResponsePaymentOccurrenceDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "amount": n => { getPaymentOccurencesResponsePaymentOccurrenceDto.amount = n.getNumberValue(); },
        "date": n => { getPaymentOccurencesResponsePaymentOccurrenceDto.date = n.getDateOnlyValue(); },
        "description": n => { getPaymentOccurencesResponsePaymentOccurrenceDto.description = n.getStringValue(); },
        "id": n => { getPaymentOccurencesResponsePaymentOccurrenceDto.id = n.getGuidValue(); },
        "name": n => { getPaymentOccurencesResponsePaymentOccurrenceDto.name = n.getStringValue(); },
        "source": n => { getPaymentOccurencesResponsePaymentOccurrenceDto.source = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGetPaymentSourceResponse(getPaymentSourceResponse: Partial<GetPaymentSourceResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { getPaymentSourceResponse.description = n.getStringValue(); },
        "id": n => { getPaymentSourceResponse.id = n.getGuidValue(); },
        "name": n => { getPaymentSourceResponse.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGetUserResponse(getUserResponse: Partial<GetUserResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { getUserResponse.id = n.getGuidValue(); },
        "name": n => { getUserResponse.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProblemDetails(problemDetails: Partial<ProblemDetails> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "detail": n => { problemDetails.detail = n.getStringValue(); },
        "instance": n => { problemDetails.instance = n.getStringValue(); },
        "status": n => { problemDetails.status = n.getNumberValue(); },
        "title": n => { problemDetails.title = n.getStringValue(); },
        "type": n => { problemDetails.type = n.getStringValue(); },
    }
}
export interface GetAllPaymentSourcesResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The paymentSources property
     */
    paymentSources?: GetAllPaymentSourcesResponsePaymentSourceDto[] | null;
}
export interface GetAllPaymentSourcesResponsePaymentSourceDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The name property
     */
    name?: string | null;
}
export interface GetAllUsersResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The users property
     */
    users?: GetAllUsersResponseUserDto[] | null;
}
export interface GetAllUsersResponseUserDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The name property
     */
    name?: string | null;
}
export interface GetPaymentOccurencesResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The occurrences property
     */
    occurrences?: GetPaymentOccurencesResponsePaymentOccurrenceDto[] | null;
}
export interface GetPaymentOccurencesResponsePaymentOccurrenceDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The amount property
     */
    amount?: number | null;
    /**
     * The date property
     */
    date?: DateOnly | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The source property
     */
    source?: string | null;
}
export interface GetPaymentSourceResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The name property
     */
    name?: string | null;
}
export interface GetUserResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The name property
     */
    name?: string | null;
}
export interface ProblemDetails extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The detail property
     */
    detail?: string | null;
    /**
     * The instance property
     */
    instance?: string | null;
    /**
     * The status property
     */
    status?: number | null;
    /**
     * The title property
     */
    title?: string | null;
    /**
     * The type property
     */
    type?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreatePaymentSourceEndpointRequest(writer: SerializationWriter, createPaymentSourceEndpointRequest: Partial<CreatePaymentSourceEndpointRequest> | undefined | null = {}) : void {
    if (createPaymentSourceEndpointRequest) {
        writer.writeStringValue("description", createPaymentSourceEndpointRequest.description);
        writer.writeStringValue("name", createPaymentSourceEndpointRequest.name);
        writer.writeAdditionalData(createPaymentSourceEndpointRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreatePaymentSourceResponse(writer: SerializationWriter, createPaymentSourceResponse: Partial<CreatePaymentSourceResponse> | undefined | null = {}) : void {
    if (createPaymentSourceResponse) {
        writer.writeStringValue("description", createPaymentSourceResponse.description);
        writer.writeGuidValue("id", createPaymentSourceResponse.id);
        writer.writeStringValue("name", createPaymentSourceResponse.name);
        writer.writeAdditionalData(createPaymentSourceResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateUserEndpointRequest(writer: SerializationWriter, createUserEndpointRequest: Partial<CreateUserEndpointRequest> | undefined | null = {}) : void {
    if (createUserEndpointRequest) {
        writer.writeStringValue("name", createUserEndpointRequest.name);
        writer.writeAdditionalData(createUserEndpointRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateUserResponse(writer: SerializationWriter, createUserResponse: Partial<CreateUserResponse> | undefined | null = {}) : void {
    if (createUserResponse) {
        writer.writeGuidValue("id", createUserResponse.id);
        writer.writeStringValue("name", createUserResponse.name);
        writer.writeAdditionalData(createUserResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGetAllPaymentSourcesResponse(writer: SerializationWriter, getAllPaymentSourcesResponse: Partial<GetAllPaymentSourcesResponse> | undefined | null = {}) : void {
    if (getAllPaymentSourcesResponse) {
        writer.writeCollectionOfObjectValues<GetAllPaymentSourcesResponsePaymentSourceDto>("paymentSources", getAllPaymentSourcesResponse.paymentSources, serializeGetAllPaymentSourcesResponsePaymentSourceDto);
        writer.writeAdditionalData(getAllPaymentSourcesResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGetAllPaymentSourcesResponsePaymentSourceDto(writer: SerializationWriter, getAllPaymentSourcesResponsePaymentSourceDto: Partial<GetAllPaymentSourcesResponsePaymentSourceDto> | undefined | null = {}) : void {
    if (getAllPaymentSourcesResponsePaymentSourceDto) {
        writer.writeStringValue("description", getAllPaymentSourcesResponsePaymentSourceDto.description);
        writer.writeGuidValue("id", getAllPaymentSourcesResponsePaymentSourceDto.id);
        writer.writeStringValue("name", getAllPaymentSourcesResponsePaymentSourceDto.name);
        writer.writeAdditionalData(getAllPaymentSourcesResponsePaymentSourceDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGetAllUsersResponse(writer: SerializationWriter, getAllUsersResponse: Partial<GetAllUsersResponse> | undefined | null = {}) : void {
    if (getAllUsersResponse) {
        writer.writeCollectionOfObjectValues<GetAllUsersResponseUserDto>("users", getAllUsersResponse.users, serializeGetAllUsersResponseUserDto);
        writer.writeAdditionalData(getAllUsersResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGetAllUsersResponseUserDto(writer: SerializationWriter, getAllUsersResponseUserDto: Partial<GetAllUsersResponseUserDto> | undefined | null = {}) : void {
    if (getAllUsersResponseUserDto) {
        writer.writeGuidValue("id", getAllUsersResponseUserDto.id);
        writer.writeStringValue("name", getAllUsersResponseUserDto.name);
        writer.writeAdditionalData(getAllUsersResponseUserDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGetPaymentOccurencesResponse(writer: SerializationWriter, getPaymentOccurencesResponse: Partial<GetPaymentOccurencesResponse> | undefined | null = {}) : void {
    if (getPaymentOccurencesResponse) {
        writer.writeCollectionOfObjectValues<GetPaymentOccurencesResponsePaymentOccurrenceDto>("occurrences", getPaymentOccurencesResponse.occurrences, serializeGetPaymentOccurencesResponsePaymentOccurrenceDto);
        writer.writeAdditionalData(getPaymentOccurencesResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGetPaymentOccurencesResponsePaymentOccurrenceDto(writer: SerializationWriter, getPaymentOccurencesResponsePaymentOccurrenceDto: Partial<GetPaymentOccurencesResponsePaymentOccurrenceDto> | undefined | null = {}) : void {
    if (getPaymentOccurencesResponsePaymentOccurrenceDto) {
        writer.writeNumberValue("amount", getPaymentOccurencesResponsePaymentOccurrenceDto.amount);
        writer.writeDateOnlyValue("date", getPaymentOccurencesResponsePaymentOccurrenceDto.date);
        writer.writeStringValue("description", getPaymentOccurencesResponsePaymentOccurrenceDto.description);
        writer.writeGuidValue("id", getPaymentOccurencesResponsePaymentOccurrenceDto.id);
        writer.writeStringValue("name", getPaymentOccurencesResponsePaymentOccurrenceDto.name);
        writer.writeStringValue("source", getPaymentOccurencesResponsePaymentOccurrenceDto.source);
        writer.writeAdditionalData(getPaymentOccurencesResponsePaymentOccurrenceDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGetPaymentSourceResponse(writer: SerializationWriter, getPaymentSourceResponse: Partial<GetPaymentSourceResponse> | undefined | null = {}) : void {
    if (getPaymentSourceResponse) {
        writer.writeStringValue("description", getPaymentSourceResponse.description);
        writer.writeGuidValue("id", getPaymentSourceResponse.id);
        writer.writeStringValue("name", getPaymentSourceResponse.name);
        writer.writeAdditionalData(getPaymentSourceResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGetUserResponse(writer: SerializationWriter, getUserResponse: Partial<GetUserResponse> | undefined | null = {}) : void {
    if (getUserResponse) {
        writer.writeGuidValue("id", getUserResponse.id);
        writer.writeStringValue("name", getUserResponse.name);
        writer.writeAdditionalData(getUserResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProblemDetails(writer: SerializationWriter, problemDetails: Partial<ProblemDetails> | undefined | null = {}) : void {
    if (problemDetails) {
        writer.writeStringValue("detail", problemDetails.detail);
        writer.writeStringValue("instance", problemDetails.instance);
        writer.writeNumberValue("status", problemDetails.status);
        writer.writeStringValue("title", problemDetails.title);
        writer.writeStringValue("type", problemDetails.type);
        writer.writeAdditionalData(problemDetails.additionalData);
    }
}
/* tslint:enable */
/* eslint-enable */
